#!/usr/bin/env python
from repo_scraper.GitChecker import GitChecker 
from repo_scraper import constants
import argparse
import re
import sys

parser = argparse.ArgumentParser()
parser.add_argument("-w", "--warnings", action="store_true", help="Print warnings (and alerts)")
parser.add_argument("-a", "--printall", action="store_true", help="Print everything (alerts, warnings and non-matches)")
parser.add_argument("-e", "--extensions",
    help='''Comma-separated extensions, files that don't match any of these will raise a warning.
         If empty, uses default list: %s ''' % constants.DEFAULT_EXTENSIONS_FORMAT)
args = parser.parse_args()

print ('IMPORTANT: This script is going to execute git commands.\n'
        'Do not change any files or execute git commands in this project'
        ' while the script is running, have a coffee or '
        'something.\n')
continue_ = raw_input("Do you want to continue? (y/n): ")
if continue_.lower()!='y':
    sys.exit('Aborted by the user')

results_to_print = ['ALERT']
if args.warnings:
    results_to_print += ['WARNING']
elif args.printall:
    results_to_print += ['WARNING', 'NOTHING']

if args.extensions:
    allowed_extensions = re.compile(',\s*\.?').split(args.extensions.lower())
else:
    allowed_extensions = constants.DEFAULT_EXTENSIONS

print 'Allowed extensions: %s' %  reduce(lambda x,y: x+', '+y, allowed_extensions)

#Create an instance of git checkerparser.add_argument("-v", "--verbose", action="store_true", help="prints all results, including no matches and warnings")
gc = GitChecker(allowed_extensions=allowed_extensions)

#Get the generator that will turn one resul per file modified in each
#commit
file_traverser =  gc.file_traverser()

for result in file_traverser:
    if result.result_type in results_to_print:
        print result


print 'Note: you are in the first commit, if you want to go to the last one do git checkout master.'

#Checkout master
#print 'git checkout master'
#p = subprocess.Popen(['git', 'checkout', 'master'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
#p.communicate()